{"ast":null,"code":"import ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs';\nimport Eos from 'eosjs';\nimport { parseEOS, toEOSString } from '../utils';\nvar scatter = null,\n    userAccount = null,\n    userEosConnection = null;\nScatterJS.plugins(new ScatterEOS());\nvar network = {\n  blockchain: 'eos',\n  chainId: 'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473',\n  host: 'jungle.eosmetal.io',\n  port: 18888,\n  protocol: 'http'\n};\nexport var loginHistoryExists = function loginHistoryExists() {\n  return !!localStorage.getItem(\"lastLoginAt\");\n};\n\nvar setLoginHistory = function setLoginHistory() {\n  return localStorage.setItem(\"lastLoginAt\", new Date().getTime());\n};\n\nexport var connect = function connect(appName) {\n  return new Promise(function (resolve, reject) {\n    ScatterJS.scatter.connect(appName).then(function (connected) {\n      var onSuccess = function onSuccess() {\n        scatter = ScatterJS.scatter;\n        resolve();\n      },\n          onError = function onError() {\n        return reject({\n          message: \"Scatter not found. Please install and unlock scatter\"\n        });\n      };\n\n      connected ? onSuccess() : onError();\n    });\n  });\n};\nexport var login = function login() {\n  // Can have more required fields like firstname, lastname, address\n  var requiredFields = {\n    accounts: [network]\n  };\n  return scatter.getIdentity(requiredFields).then(function () {\n    userAccount = scatter.identity.accounts.find(function (x) {\n      return x.blockchain === 'eos';\n    }); // Set expiration time for eos connection, can have more options\n\n    var eosOptions = {\n      expireInSeconds: 60\n    };\n    userEosConnection = scatter.eos(network, Eos, eosOptions);\n    setLoginHistory();\n    return {\n      name: userAccount.name,\n      authority: userAccount.authority,\n      publicKey: userAccount.publicKey\n    };\n  });\n};\nexport var logout = function logout() {\n  return scatter.logout();\n};\nexport var sendTokens = function sendTokens(_ref) {\n  var toAccount = _ref.toAccount,\n      amount = _ref.amount,\n      memo = _ref.memo;\n  var transactionOptions = {\n    authorization: [\"\".concat(userAccount.name, \"@\").concat(userAccount.authority)]\n  };\n  return userEosConnection.transfer(userAccount.name, toAccount, toEOSString(amount), memo, transactionOptions).then(function (trx) {\n    return trx.transaction_id;\n  });\n};\nexport var getWallet = function getWallet() {\n  return userEosConnection.getAccount(userAccount.name).then(function (userDetails) {\n    var liquidToken = parseEOS(userDetails.core_liquid_balance),\n        netStaked = parseEOS(userDetails.total_resources.net_weight),\n        cpuStaked = parseEOS(userDetails.total_resources.cpu_weight),\n        totalWorth = liquidToken + netStaked + cpuStaked;\n    return {\n      balance: {\n        liquidToken: liquidToken,\n        totalWorth: totalWorth,\n        netStaked: netStaked,\n        cpuStaked: cpuStaked,\n        refunding: '',\n        stakedByOthers: ''\n      },\n      resource: {\n        net: {\n          total: userDetails.net_limit.max,\n          available: userDetails.net_limit.available\n        },\n        cpu: {\n          total: userDetails.cpu_limit.max,\n          available: userDetails.cpu_limit.available\n        },\n        ram: {\n          total: userDetails.ram_quota,\n          available: userDetails.ram_usage\n        }\n      }\n    };\n  });\n};","map":{"version":3,"sources":["/home/sterbon/Desktop/FoodSCM/src/scatter/scatter_helper.js"],"names":["ScatterJS","ScatterEOS","Eos","parseEOS","toEOSString","scatter","userAccount","userEosConnection","plugins","network","blockchain","chainId","host","port","protocol","loginHistoryExists","localStorage","getItem","setLoginHistory","setItem","Date","getTime","connect","appName","Promise","resolve","reject","then","connected","onSuccess","onError","message","login","requiredFields","accounts","getIdentity","identity","find","x","eosOptions","expireInSeconds","eos","name","authority","publicKey","logout","sendTokens","toAccount","amount","memo","transactionOptions","authorization","transfer","trx","transaction_id","getWallet","getAccount","userDetails","liquidToken","core_liquid_balance","netStaked","total_resources","net_weight","cpuStaked","cpu_weight","totalWorth","balance","refunding","stakedByOthers","resource","net","total","net_limit","max","available","cpu","cpu_limit","ram","ram_quota","ram_usage"],"mappings":"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","sourcesContent":["import ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs';\nimport Eos from 'eosjs';\n\nimport {\n    parseEOS,\n    toEOSString\n} from '../utils';\n\nlet\n    scatter = null,\n    userAccount = null,\n    userEosConnection = null;\n\nScatterJS.plugins( new ScatterEOS() );\n\nconst network = {\n    blockchain:'eos',\n    chainId:'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473',\n    host:'jungle.eosmetal.io',\n    port:18888,\n    protocol:'http'\n};\n\nexport const loginHistoryExists = () => !!localStorage.getItem(\"lastLoginAt\");\nconst setLoginHistory    = () => localStorage.setItem(\"lastLoginAt\", new Date().getTime());\n\nexport const connect = appName => (new Promise((resolve, reject)=> {\n    ScatterJS.scatter.connect(appName).then(connected => {\n        const\n            onSuccess = () => {\n                scatter = ScatterJS.scatter;\n                resolve();\n            },\n            onError = () => reject({\n                message: \"Scatter not found. Please install and unlock scatter\"\n            });\n\n        connected ? onSuccess() : onError();\n    });\n}));\n\nexport const login = ()=> {\n    // Can have more required fields like firstname, lastname, address\n    const requiredFields = { accounts:[network] };\n    return scatter.getIdentity(requiredFields).then(() => {\n        userAccount = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n\n        // Set expiration time for eos connection, can have more options\n        const eosOptions = { expireInSeconds: 60 };\n        userEosConnection = scatter.eos(network, Eos, eosOptions);\n        setLoginHistory();\n        return {\n            name: userAccount.name,\n            authority: userAccount.authority,\n            publicKey: userAccount.publicKey\n        };\n    });\n};\n\nexport const logout = () => scatter.logout();\n\nexport const sendTokens = ({toAccount, amount, memo}) => {\n    const transactionOptions = { authorization:[`${userAccount.name}@${userAccount.authority}`] };\n    return userEosConnection.transfer(\n        userAccount.name,\n        toAccount,\n        toEOSString(amount),\n        memo,\n        transactionOptions\n    ).then(trx => {\n        return trx.transaction_id;\n    });\n};\n\nexport const getWallet = () => {\n    return userEosConnection.getAccount(userAccount.name).then(userDetails=> {\n        const\n            liquidToken = parseEOS(userDetails.core_liquid_balance),\n            netStaked = parseEOS(userDetails.total_resources.net_weight),\n            cpuStaked = parseEOS(userDetails.total_resources.cpu_weight),\n            totalWorth = liquidToken + netStaked + cpuStaked;\n\n        return {\n            balance: {\n                liquidToken,\n                totalWorth,\n                netStaked,\n                cpuStaked,\n                refunding: '',\n                stakedByOthers: '',\n            },\n            resource: {\n                net: {total: userDetails.net_limit.max, available: userDetails.net_limit.available},\n                cpu: {total: userDetails.cpu_limit.max, available: userDetails.cpu_limit.available},\n                ram: {total: userDetails.ram_quota,     available: userDetails.ram_usage}\n            }\n        }\n    });\n};"]},"metadata":{},"sourceType":"module"}